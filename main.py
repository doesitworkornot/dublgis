import openai
import requests

import json

from random import randrange
from dotenv import dotenv_values

config = dotenv_values(".env")

openai.api_key = config['openai_key']
openai.base_url = config['openai_ip']
dublgis_key = config['dublgis']


cities = [
    "–ú–æ—Å–∫–≤–∞",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    "–ö–∞–∑–∞–Ω—å",
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
    "–ß–µ–ª—è–±–∏–Ω—Å–∫",
    "–°–∞–º–∞—Ä–∞",
    "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
    "–£—Ñ–∞"
]
def get_json(url):
    response = requests.get(url)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ç—É—Å –∫–æ–¥ 200)
    if response.status_code == 200:
        # –ü–æ–ª—É—á–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        json_data = response.json()
    return json_data

def get_info(city):
    search_city_url = f'https://catalog.api.2gis.com/3.0/items?q={city}&key={dublgis_key}'
    city_ind = get_json(search_city_url)["result"]["items"][0]["id"]

    search_pl_url = f'https://catalog.api.2gis.com/3.0/items?q=–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏&fields=items.point&city_id={city_ind}&key={dublgis_key}'
    interensting_places = get_json(search_pl_url)["result"]["items"]
    place_ids = [x["id"] for x in interensting_places]
    place_id = place_ids[randrange(len(place_ids))]

    place_info_url = f'https://catalog.api.2gis.com/3.0/items/byid?id={place_id}&key={dublgis_key}&fields=items.description'
    place_info_json = get_json(place_info_url)["result"]["items"][0]
    print(place_info_json)
    place_info = place_info_json["description"]
    place_name = place_info_json["full_name"]
    return place_name, place_info





def gen_mystery():
    city = cities[randrange(len(cities))]
    place, description = get_info(city)
    print(place, description)
    # SYSTEM_PROMPT = f"""
    # –¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    # –¢–µ–±–µ –Ω–∞–¥–æ –∑–∞–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∫—É –ø—Ä–æ –æ–±—ä–µ–∫—Ç –∫—É–ª—å—Ç—É—Ä—ã. 
    # –í–æ—Ç –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: {place}
    # –ê –≤–æ—Ç –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {description} 

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "–ø–æ –Ω–æ–≤–æ–π", "–∑–∞–Ω–æ–≤–æ", "–Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞", "—Å–±—Ä–æ—Å—å" –∏ —Ç.–ø.),
    # –æ—Ç–≤–µ—Ç—å –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ:
    # {"reset": true, "reply": "–•–æ—Ä–æ—à–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞!"}

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä, –æ—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    # {"reset": false, "reply": "–¢–≤–æ–π –æ—Ç–≤–µ—Ç..."}

    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON.
    # """


# chat_history = [{"role": "system", "content": SYSTEM_PROMPT}]

def call_llm():
    response = openai.ChatCompletion.create(
        model="Qwen/Qwen3-32B",  
        messages=chat_history,
        temperature=0.7,
        max_tokens=512
    )
    return response['choices'][0]['message']['content']

def handle_user_input(user_input: str):
    global chat_history

    chat_history.append({"role": "user", "content": user_input})
    raw_response = call_llm()

    try:
        data = json.loads(raw_response)
        if not isinstance(data, dict) or "reset" not in data or "reply" not in data:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        if data["reset"]:
            chat_history = [{"role": "system", "content": SYSTEM_PROMPT}]
            return data["reply"]

        chat_history.append({"role": "assistant", "content": data["reply"]})
        return data["reply"]

    except Exception:
        chat_history.append({"role": "assistant", "content": raw_response})
        return raw_response

def chat_loop():
    print("üí¨ –ß–∞—Ç —Å vLLM –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ –Ω–æ–≤–æ–π' –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ –¥–ª—è —Å–±—Ä–æ—Å–∞. Ctrl+C ‚Äî –≤—ã—Ö–æ–¥.\n")
    try:
        while True:
            user_input = input("–í—ã: ").strip()
            if not user_input:
                continue
            reply = handle_user_input(user_input)
            print(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {reply}\n")
    except KeyboardInterrupt:
        print("\nüõë –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞.")

if __name__ == "__main__":
    # chat_loop()
    gen_mystery()

    